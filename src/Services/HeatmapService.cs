using CSGO_Demos_Manager.Models;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Threading.Tasks;
using System.IO;
using System.Linq;
using CSGO_Demos_Manager.Exceptions.Heatmap;
using CSGO_Demos_Manager.Services.Map;

namespace CSGO_Demos_Manager.Services
{
	public class HeatmapService
	{
		public MapService MapService { get; set; }

		public HeatmapService(MapService mapService)
		{
			MapService = mapService;
		}

		/// <summary>
		/// Calculated X,Y coordinates
		/// </summary>
		/// <param name="points"></param>
		/// <returns></returns>
		private List<HeatmapPoint> GetCalculatedPoints(List<HeatmapPoint> points)
		{
			List<HeatmapPoint> heatmapPointsCalculated = new List<HeatmapPoint>();

			foreach (HeatmapPoint point in points)
			{
				// Calcul to resolution
				float x = MapService.CalculatePointToResolutionX(point.X);
				float y = MapService.CalculatePointToResolutionY(point.Y);

				point.X = x;
				point.Y = y;

				if(heatmapPointsCalculated.Contains(point))
				{
					var index = heatmapPointsCalculated.IndexOf(point);
					heatmapPointsCalculated[index].Value++;
				}
				else
				{
					heatmapPointsCalculated.Add(point);
				}
			}

			return heatmapPointsCalculated;
		}

		/// <summary>
		/// Generate a Image from its base 64 datas
		/// </summary>
		/// <param name="dataImage"></param>
		/// <returns></returns>
		private Image LoadImage(string dataImage)
		{
			// remove data:image/png;base64,
			dataImage = dataImage.Remove(0, 22);

			byte[] bytes = Convert.FromBase64String(dataImage);

			Image image;
			using (MemoryStream ms = new MemoryStream(bytes))
			{
				image = Image.FromStream(ms);
			}

			return image;
		}

		/// <summary>
		/// Merge overview image with canvas generated by Heatmap.js
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		public Image GenerateImage(string data)
		{
			// Image with heatmap colors
			Image heatmapImage = LoadImage(data);

			// Final image
			Bitmap finalImage = new Bitmap(MapService.Overview.Width, MapService.Overview.Height);

			using (Graphics g = Graphics.FromImage(finalImage))
			{
				g.DrawImage(MapService.Overview, new Rectangle(0, 0, MapService.Overview.Width, MapService.Overview.Height));
				g.DrawImage(heatmapImage, new Rectangle(0, 0, heatmapImage.Width, heatmapImage.Height));
			}

			return finalImage;
		}

		public async Task<string> GenerateHtml(Demo demo, ComboboxSelector selector)
		{
			List<HeatmapPoint> heatmapPoints;
			int radius = 20;

			switch (selector.Id)
			{
				case "kills":
					heatmapPoints = new List<HeatmapPoint>(demo.Kills.Select(t => t.Point.Clone()).ToList());
					if (heatmapPoints.Count == 0)
					{
						throw new HeatmapDataNotFoundException("No kills occurs in this match");
					}
					break;
				case "shots":
					heatmapPoints = new List<HeatmapPoint>(demo.HeatmapPoints);
					if (heatmapPoints.Count == 0)
					{
						throw new HeatmapDataNotFoundException("No shots occurs during this match");
					}
					break;
				case "flashbangs":
					heatmapPoints = new List<HeatmapPoint>(demo.Rounds.SelectMany(r => r.FlashbangsExploded.Select(f => f.Point.Clone())).ToList());
					radius = 15;
					if (heatmapPoints.Count == 0)
					{
						throw new HeatmapDataNotFoundException("No flashbangs has been thrown during this match");
					}
					break;
				case "he":
					heatmapPoints = new List<HeatmapPoint>(demo.Rounds.SelectMany(r => r.ExplosiveGrenadesExploded.Select(f => f.Point.Clone())).ToList());
					radius = 15;
					if (heatmapPoints.Count == 0)
					{
						throw new HeatmapDataNotFoundException("No HE grenades has been thrown during this match");
					}
					break;
				case "smokes":
					heatmapPoints = new List<HeatmapPoint>(demo.Rounds.SelectMany(r => r.SmokesStarted.Select(f => f.Point.Clone())).ToList());
					radius = 15;
					if (heatmapPoints.Count == 0)
					{
						throw new HeatmapDataNotFoundException("No smokes has been thrown during this match");
					}
					break;
				case "molotovs":
					heatmapPoints = new List<HeatmapPoint>(demo.Rounds.SelectMany(r => r.MolotovsThrowed.Select(f => f.Point.Clone())).ToList());
					radius = 15;
					if (heatmapPoints.Count == 0)
					{
						throw new HeatmapDataNotFoundException("No molotovs has been thrown during this match");
					}
					break;
				default:
					return "";
			}

			string html = "";
			await Task.Run(() =>
			{
				List<HeatmapPoint> points = GetCalculatedPoints(heatmapPoints);

				string datas = "[";
				for (int i = 0; i < points.Count; i++)
				{
					datas += "{x: " + points[i].X + ",";
					datas += "y: " + points[i].Y + ",";
					datas += "value: " + points[i].Value;
					if (i == points.Count - 1)
					{
						datas += "}";
					}
					else
					{
						datas += "},";
					}

				}
				datas += "]";

				int max = points.Max(i => i.Value);

				string script = "function init(){var n=h337.create({container:document.getElementById(\"heatmapContainer\"),radius:" + radius + "}),d={max:" + max + ",data:" + datas + "};n.setData(d)}document.addEventListener(\"DOMContentLoaded\",init,!1);";

				html = string.Format(Properties.Resources.heatmap, script, MapService.OverviewImageData);
			});

			return html;
		}

		public Task<string> Generate(Demo currentDemo, ComboboxSelector currentHeatmapSelector)
		{
			MapService.Factory(currentDemo.MapName);
			return GenerateHtml(currentDemo, currentHeatmapSelector);
		}
	}
}